#!/usr/bin/env python3

import argparse
import json
import tempfile
import subprocess
import os
import sys
import re
import sys
from dataclasses import dataclass
from pathlib import Path

datadir = Path(__file__).parent.absolute() / "src"

######################################################################
## Running Faust

def run_faust(filename, faust, faust_args, sample_rate, table_size, **kwargs):
    """Runs Faust on a given file. Generates a suitable platform.lib first.

    Returns a tuple (output, metadata)."""

    with tempfile.TemporaryDirectory() as dir:
        with open(dir + "/platform.lib", "w") as file:
            file.write(f"""
SR = {sample_rate};
BS = 1;
tablesize = {table_size};
""")

        faust_args += " -nvi -os -json"
        cmd = [faust, args.filename,
               "-a", datadir / "logue.arch",
               "-fm", datadir / "fastmath.cpp",
               "-I", dir, "-O", dir] + faust_args.split()
        faust = subprocess.run(cmd, stdout=subprocess.PIPE, check=True)
        with open(Path(dir) / (filename.name + ".json")) as file:
            metadata = json.load(file)

        return (faust.stdout.decode('utf-8'), metadata)

######################################################################
## Extracting information about UI widgets

@dataclass
class Widget:
    """A UI widget."""
    path: tuple[str]
    var: str
    _min: float
    _max: float
    init: float
    meta: dict[str, str]

    @property
    def path_str(self):
        return "/".join(self.path)

    @property
    def label(self):
        return self.path[-1]

    @property
    def is_percentage(self):
        return self.meta.get("style", "") == "percentage"

    # See https://github.com/korginc/logue-sdk/pull/28/files
    # TODO: check these!
    @property
    def min(self):
        if self.label.startswith("param"):
          if not self.is_percentage and self._min <= 0: return 1
          # if self.min < -100: return -100
          # if self.min > 100: return 100
        return self._min

    @property
    def max(self):
        return self._max

def find_widgets(output, metadata):
    """Find all the UI widgets.

    Returns a list of Widget objects."""

    var_names = find_widget_variable_names(output)
    result = []

    def recurse(widget, path):
        nonlocal result
        path += (widget["label"],)

        for child in widget.get("items", []):
            recurse(child, path)

        if widget["type"] in ["hslider", "vslider", "nentry", "button"]:
            meta = {k: v for dict in widget.get("meta", []) for k, v in dict.items()}
            min = 0 if widget["type"] == "button" else widget["min"]
            max = 1 if widget["type"] == "button" else widget["max"]
            init = 0 if widget["type"] == "button" else widget["init"]
            w = Widget(path=path, var=var_names[path], _min=min, _max=max, init=init, meta=meta)
            result.append(w)

        elif "items" not in widget:
            type = widget["type"]
            print(f"Warning: widget type {type} not recognised", file=sys.stderr)

    for widget in metadata["ui"]:
        recurse(widget, ())

    return result

def find_widget_variable_names(output):
  """Given a C++ file, finds the name of the variable where each UI widget is
  stored.

  Returns a dictionary mapping a path (represented as a tuple of strings)
  to a variable name."""

  result = {}
  path = []

  for line in output.splitlines():
      # Search for e.g. ui_interface->addHorizontalSlider(...)
      match = re.match(r"\s*ui_interface->([a-zA-Z]*)\((.*)\);", line)
      if match:
          command, argstr = match.groups()
          args = argstr.split(", ")
          if command in ['openTabBox', 'openHorizontalBox', 'openVerticalBox']:
              label = args[0].replace('"', '')
              path.append(label)
          elif command == 'closeBox':
              path.pop()
          elif command in ['addVerticalSlider', 'addHorizontalSlider', 'addNumEntry', 'addButton']:
              label = args[0].replace('"', '')
              var = args[1].replace('&', '')
              result[tuple(path) + (label,)] = var

  return result

######################################################################
## Generating the C++ file

def write_output_file(filename, output, widgets, sample_rate, control_rate, monitor_cpu_load, **kwargs):
    """Write the C++ output, including necessary #defines."""

    with open(filename, "w") as file:
        params = set([
            "key", "freq", "velocity", "gain", "gate",
            "shape", "shiftshape", "lfo",
            "param1", "param2", "param3", "param4", "param5", "param6"
        ])

        # Add the necessary #defines for each parameter
        for w in widgets:
            param = w.label
            if param == 'vel': param = 'velocity'
            if param in params:
                # Skip the no-op macro (below) for this parameter
                params.remove(param)

                # All parameters use set_XXX
                file.write(f"#define set_{param}(val) do {{ float _new_val = val; if (dsp.{w.var} != _new_val) control_changed = true; dsp.{w.var} = _new_val; }} while(0)\n")

                # Shape and shift-shape use XXX_{MIN, MAX} for autoscaling
                if param in ["shape", "shiftshape"]:
                    file.write(f"#define {param.upper()}_MIN {w.min}\n")
                    file.write(f"#define {param.upper()}_MAX {w.max}\n")
            else:
                print(f"Warning: widget {w.path_str} not recognised", file=sys.stderr)

        # Add no-op macros for undefined parameters
        for param in params:
            file.write(f"#define set_{param}(val)\n")

        # Add miscellaneous parameters
        file.write(f"""
#define SAMPLE_RATE_FACTOR {48000//sample_rate}
#define FRAMES_PER_CONTROL {48000//control_rate}
""")
        if monitor_cpu_load:
            file.write("#define MONITOR_CPU_LOAD")

        # Add the code itself
        file.write(output)

######################################################################
## Generating the manifest

def write_manifest(filename, *args, **kwargs):
    """Write a manifest.json file for the project."""

    with open(filename, "w") as file:
        json.dump(manifest(*args, **kwargs), file, indent=2)

def manifest(name, widgets, platform, **kwargs):
    """Return a manifest for the project (as a Python dict)."""

    params = find_params(widgets)

    return {
      "header": {
          "platform": platform,
          "module": "osc",
          "api": "1.1-0",
          "dev_id": 0,
          "prg_id": 0,
          "version": "1.0-0",
          "name": name,
          "num_param": len(params),
          "params": [widget_manifest(param) for param in params]}}

def widget_manifest(w):
    """Get the manifest declaration for a given parameter widget.
    The argument can also be None."""

    if w is None:
        return ["Unused", 0, 0, ""]
    else:
        percent = "%" if w.is_percentage else ""
        tooltip = w.meta.get("tooltip", None) or ("Param " + str(i))
        return [tooltip, w.min, w.max, percent]

def find_params(widgets):
    """Find widgets which correspond to parameters.

    Returns a list of widgets, one per parameter.
    The list contains None for parameters which are not defined.
    But there are no trailing Nones - the list ends with the last
    (non-None) parameter."""

    max_params = 6
    result = [None] * max_params
    for i in range(max_params):
        for w in widgets:
            if w.label == f"param{i+1}":
                result[i] = w

    while result and result[-1] is None:
        result.pop()

    return result

######################################################################
## Main function

def faust2logue(filename, output_file, manifest_file, **kwargs):
    output, metadata = run_faust(filename, **kwargs)

    if metadata["inputs"] != 0:
        print("Error: .dsp file must not have any inputs", file=sys.stderr)
        sys.exit(1)
    if metadata["outputs"] != 1:
        print("Error: .dsp file must have exactly 1 output", file=sys.stderr)
        sys.exit(1)

    name = metadata["name"]

    widgets = find_widgets(output, metadata)
    write_output_file(output_file, output, widgets, **kwargs)
    write_manifest(manifest_file, name, widgets, **kwargs)

######################################################################
## Argument parser and main program

class LabelledVal:
    """A class to control how the default value is shown in --help."""
    def __init__(self, val, text):
        self.val = val
        self._text = text

    def __str__(self):
        return self._text

parser = argparse.ArgumentParser(
    prog='faust2logue',
    description='Convert a Faust .dsp file to Logue SDK format',
    formatter_class=argparse.ArgumentDefaultsHelpFormatter)

parser.add_argument('filename',
                    type=Path,
                    help='a .dsp file to convert')
parser.add_argument('-O', '--output-directory',
                    action='store',
                    type=Path,
                    default=LabelledVal(None, 'source directory'),
                    help='directory where output will be stored')
parser.add_argument('-p', '--platform',
                    action='store',
                    choices=['minilogue-xd', 'prologue', 'nutekt-digital'],
                    default='minilogue-xd',
                    help='platform for manifest.json file')
parser.add_argument('--faust',
                    action='store',
                    default='faust',
                    help='name of Faust executable')
parser.add_argument('-F', '--faust-args',
                    action='store',
                    default='-mapp -ct 0 -exp10',
                    help='extra arguments to be passed to Faust')
parser.add_argument('-c', '--control-rate',
                    action='store',
                    default=200,
                    type=int,
                    help='rate in Hz at which control inputs are updated')
parser.add_argument('-r', '--sample-rate',
                    action='store',
                    choices=[48000,24000,12000],
                    default=48000,
                    type=int,
                    help='sample rate in Hz')
parser.add_argument('-t', '--table-size',
                    action='store',
                    default=128,
                    type=int,
                    help='table size used by rdtable')
parser.add_argument('-m', '--monitor-cpu-load',
                    action=argparse.BooleanOptionalAction,
                    default=LabelledVal(False, 'no'),
                    help='monitor CPU load instead of producing audio')

if __name__ == '__main__':
  args = parser.parse_args()
  # Get rid of any LabelledVals
  for arg in vars(args):
      argval = getattr(args, arg)
      if isinstance(argval, LabelledVal):
          setattr(args, arg, argval.val)

  if not args.output_directory:
      args.output_directory = args.filename.parent

  args.output_file = args.output_directory / (args.filename.stem + ".cpp")
  args.manifest_file = args.output_directory / "manifest.json"

  faust2logue(**args.__dict__)
