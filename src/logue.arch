<<includeIntrinsic>>

#include <stdint.h>
#include <algorithm>
#include "userosc.h"
#include "inputs.h"
#define FAUSTFLOAT float

extern char __heap_start, __heap_end;
static uintptr_t heap = (uintptr_t) &__heap_end;

static void panic() { while(1); }

void * operator new(unsigned int bytes) {
    heap -= bytes;
    heap &= ~3; // 4-byte align
    if (heap < (uintptr_t) &__heap_start) panic();
    return (void *)heap;
}

void operator delete(void * ptr) {
}

class dsp {};

struct Meta {
    void declare(const char* key, const char* value) {};
};

struct Soundfile {};

struct UI {
    // -- widget's layouts
    void openTabBox(const char* label) {}
    void openHorizontalBox(const char* label) {}
    void openVerticalBox(const char* label) {}
    void closeBox() {}

    // -- active widgets
    void addButton(const char* label, FAUSTFLOAT* zone) {}
    void addCheckButton(const char* label, FAUSTFLOAT* zone) {}
    void addVerticalSlider(const char* label, FAUSTFLOAT* zone, FAUSTFLOAT init, FAUSTFLOAT min, FAUSTFLOAT max, FAUSTFLOAT step) {}
    void addHorizontalSlider(const char* label, FAUSTFLOAT* zone, FAUSTFLOAT init, FAUSTFLOAT min, FAUSTFLOAT max, FAUSTFLOAT step) {}
    void addNumEntry(const char* label, FAUSTFLOAT* zone, FAUSTFLOAT init, FAUSTFLOAT min, FAUSTFLOAT max, FAUSTFLOAT step) {}

    // -- passive widgets
    void addHorizontalBargraph(const char* label, FAUSTFLOAT* zone, FAUSTFLOAT min, FAUSTFLOAT max) {}
    void addVerticalBargraph(const char* label, FAUSTFLOAT* zone, FAUSTFLOAT min, FAUSTFLOAT max) {}

    // -- soundfiles
    void addSoundfile(const char* label, const char* filename, Soundfile** sf_zone) {}

    // -- metadata declarations
    void declare(FAUSTFLOAT* zone, const char* key, const char* val) {}
};

// We need access to the sliders etc!
#define private public
<<includeclass>>
#undef private

mydsp dsp;

void OSC_INIT(uint32_t platform, uint32_t api)
{
  (void)platform;
  (void)api;
  dsp.init(k_samplerate);
}

void OSC_CYCLE(const user_osc_param_t * const params,
               int32_t *yn,
               const uint32_t frames)
{
  FAUSTFLOAT ynf[frames];
  FAUSTFLOAT *inputs[] = {};
  FAUSTFLOAT *outputs[] = {ynf};

  uint8_t note = params->pitch >> 8;
  uint8_t mod = params->pitch & 0xff;

  // Adapted from osc_w0f_for_note.
  float f0 = osc_notehzf(note);
  float f1 = osc_notehzf(note);
  float f = clipmaxf(linintf(mod * k_note_mod_fscale, f0, f1), k_note_max_hz);

  set_key(note);
  set_freq(f);

  dsp.compute(frames, inputs, outputs);
  for (int i = 0; i < frames; i++)
    yn[i] = f32_to_q31(ynf[i]);
}

void OSC_NOTEON(const user_osc_param_t * const params)
{
  set_velocity(64);
  set_gain(0.5);
  set_gate(1);
  dsp.instanceClear(); // Makes some sense since the oscillator is monophonic
                       // and is paused when the ADSR envelope is at zero
}

void OSC_NOTEOFF(const user_osc_param_t * const params)
{
  set_velocity(0);
  set_gain(0);
  set_gate(0);
}

void OSC_PARAM(uint16_t index, uint16_t value)
{ 
  (void)index;
  (void)value;
#if 0
  Waves::Params &p = s_waves.params;
  Waves::State &s = s_waves.state;
  
  switch (index) {
  case k_user_osc_param_id1:
    // wave 0
    // select parameter
    {
      static const uint8_t cnt = k_waves_a_cnt + k_waves_b_cnt + k_waves_c_cnt; 
      p.wave0 = value % cnt;
      s.flags |= Waves::k_flag_wave0;
    }
    break;
    
  case k_user_osc_param_id2:
    // wave 1
    // select parameter
    {
      static const uint8_t cnt = k_waves_d_cnt + k_waves_e_cnt + k_waves_f_cnt; 
      p.wave1 = value % cnt;
      s.flags |= Waves::k_flag_wave1;
    }
    break;
    
  case k_user_osc_param_id3:
    // sub wave
    // select parameter
    p.subwave = value % k_waves_a_cnt;
    s.flags |= Waves::k_flag_subwave;
    break;
    
  case k_user_osc_param_id4:
    // sub mix
    // percent parameter
    p.submix = clip01f(0.05f + value * 0.01f * 0.90f); // scale in 0.05 - 0.95
    break;
    
  case k_user_osc_param_id5:
    // ring mix
    // percent parameter
    p.ringmix = clip01f(value * 0.01f);
    break;
    
  case k_user_osc_param_id6:
    // bit crush
    // percent parameter
    p.bitcrush = clip01f(value * 0.01f);
    s.flags |= Waves::k_flag_bitcrush;
    break;
    
  case k_user_osc_param_shape:
    // 10bit parameter
    p.shape = param_val_to_f32(value);
    break;
    
  case k_user_osc_param_shiftshape:
    // 10bit parameter
    p.shiftshape = 1.f + param_val_to_f32(value); 
    break;
    
  default:
    break;
  }
#endif
}
